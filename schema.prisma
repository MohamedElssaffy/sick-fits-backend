// This file is automatically generated by Keystone, do not modify it manually.
// Modify your Keystone config when you want to change this.

datasource postgresql {
  url      = env("DATABASE_URL")
  provider = "postgresql"
}

generator client {
  provider   = "prisma-client-js"
  output     = "node_modules/.prisma/client"
  engineType = "binary"
}

model User {
  id                      String     @id @default(uuid()) @postgresql.Uuid
  name                    String     @default("")
  email                   String     @unique @default("")
  password                String?
  cart                    CartItem[] @relation("CartItem_user")
  orders                  Order?     @relation("Order_user")
  role                    Role?      @relation("User_role", fields: [roleId], references: [id])
  roleId                  String?    @map("role") @postgresql.Uuid
  products                Product[]  @relation("Product_user")
  passwordResetToken      String?
  passwordResetIssuedAt   DateTime?
  passwordResetRedeemedAt DateTime?

  @@index([roleId])
}

model Role {
  id                String  @id @default(uuid()) @postgresql.Uuid
  name              String  @default("")
  assignedTo        User[]  @relation("User_role")
  canManageProducts Boolean @default(false)
  canSeeOtherUsers  Boolean @default(false)
  canManageUsers    Boolean @default(false)
  canManageRoles    Boolean @default(false)
  canManageCart     Boolean @default(false)
  canManageOrders   Boolean @default(false)
}

model Product {
  id                    String        @id @default(uuid()) @postgresql.Uuid
  name                  String        @default("")
  description           String        @default("")
  photo                 ProductImage? @relation("Product_photo", fields: [photoId], references: [id])
  photoId               String?       @unique @map("photo") @postgresql.Uuid
  status                String?       @default("DRAFT")
  price                 Int?
  user                  User?         @relation("Product_user", fields: [userId], references: [id])
  userId                String?       @map("user") @postgresql.Uuid
  from_CartItem_product CartItem[]    @relation("CartItem_product")

  @@index([userId])
}

model ProductImage {
  id                   String      @id @default(uuid()) @postgresql.Uuid
  image                Json?
  altText              String      @default("")
  product              Product?    @relation("Product_photo")
  from_OrderItem_photo OrderItem[] @relation("OrderItem_photo")
}

model CartItem {
  id        String   @id @default(uuid()) @postgresql.Uuid
  quantity  Int      @default(1)
  product   Product? @relation("CartItem_product", fields: [productId], references: [id])
  productId String?  @map("product") @postgresql.Uuid
  user      User?    @relation("CartItem_user", fields: [userId], references: [id])
  userId    String?  @map("user") @postgresql.Uuid

  @@index([productId])
  @@index([userId])
}

model Order {
  id     String      @id @default(uuid()) @postgresql.Uuid
  total  Int?
  items  OrderItem[] @relation("OrderItem_order")
  user   User?       @relation("Order_user", fields: [userId], references: [id])
  userId String?     @unique @map("user") @postgresql.Uuid
  charge String      @default("")
}

model OrderItem {
  id          String        @id @default(uuid()) @postgresql.Uuid
  name        String        @default("")
  description String        @default("")
  photo       ProductImage? @relation("OrderItem_photo", fields: [photoId], references: [id])
  photoId     String?       @map("photo") @postgresql.Uuid
  price       Int?
  quantity    Int?
  order       Order?        @relation("OrderItem_order", fields: [orderId], references: [id])
  orderId     String?       @map("order") @postgresql.Uuid

  @@index([photoId])
  @@index([orderId])
}